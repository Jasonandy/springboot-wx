<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	
	<!-- 配置文件配置化 -->
	<properties resource="generator.properties" />

    <!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包-->
    <classPathEntry  location="D:/dev/maven/repo/mysql/mysql-connector-java/5.1.14/mysql-connector-java-5.1.14.jar"/>
    
    <!-- 
	    context:生成一组对象的环境 
	    id:必选，上下文id，用于在生成错误时提示
	    defaultModelType:指定生成对象的样式  分层-  双主键 defaultModelType="hierarchical"
	        1，conditional：类似hierarchical；
	        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
	        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
	    targetRuntime:
	        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
	        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
	    introspectedColumnImpl：类全限定名，用于扩展MBGc -->
	    
    
    <!-- Ucaner  targetRuntime:MyBatis3Simple MyBatis3 -->
    <context id="Ucaner"   targetRuntime="${targetRuntime}" >
		
    	<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表; 
    						一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="false" />
		
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		
		<!-- 格式化java代码 -->
		<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
		
		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />
		
		<!-- 文档注释器 [可以定制化]
			mybatis 接口 type="com.wanguo.wx.service.common.plugin.WanGuoCommentGenerator" 
			定制化mysql语句 注释等   后期优化 
		-->    	
        <commentGenerator >
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>
		
        
        <!--数据库链接URL，用户名、密码 -->
        <jdbcConnection  driverClass="${jdbc_driver}"  connectionURL="${jdbc_url}" userId="${jdbc_username}" password="${jdbc_password}">
        	<!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 -->
        </jdbcConnection>
        
        <!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl;
                        注意一点，默认会先尝试使用Integer,Long,Short等来对应DECIMAL和NUMERIC数据类型;    -->
        <javaTypeResolver>
        	<!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal;
				scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        
        
        <!-- java模型创建器，是必须要的元素 负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
			targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制； targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 -->
        <javaModelGenerator targetPackage="${targetPackageEntity}" targetProject="${targetProject}">
            <!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
			<!-- <property name="constructorBased" value="false" /> -->
			
			<!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
			<!-- <property name="immutable" value="true" /> -->
            <property name="enableSubPackages" value="true"/>
            
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        
        <!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
			或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，
			这个元素就必须配置 targetPackage/targetProject:同javaModelGenerator -->
        <sqlMapGenerator targetPackage="${targetPackageMapperXml}" targetProject="${targetProjectXml}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        
         <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口               -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${targetPackageDao}" targetProject="${targetProject}">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        
        
        <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
        <!-- 参考 javaModelGenerator 的 constructorBased属性 -->
		<!-- property name="constructorBased" value="false"  generatedKey column="id" sqlStatement="JDBC" -->
		<!-- mapperName="{0}Dao" 插件实现修改名字 [后期优化 需要了解原理 ] -->
        <table tableName="wg_test"  domainObjectName="Test" 
        	enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" 
        	enableSelectByExample="false" selectByExampleQueryId="false">
        </table>
        
        
    </context>
</generatorConfiguration>