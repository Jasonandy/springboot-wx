<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<!-- PARENT PROJECT -->
	<parent>
	  <groupId>cn.ucaner</groupId>
	  <artifactId>wx-app</artifactId>
	  <version>1.0.1-TINA</version>
	</parent>
	
	<!-- WX-APP-GATEWAY -->
	<artifactId>wx-app-gateway</artifactId>
	<name>wx-app-gateway</name>
  	<description>对外和对内提供api接口服务基于 service 层的逻辑controller层  提供RESTful接口</description>
  	
  	<!-- PROPERTIES  -->
	<properties>
  		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  		<!--PROPERTIES节点中设置docker镜像的前缀 'wx-app' --> 
        <docker.image.prefix>wx-app-gateway</docker.image.prefix>
    </properties>
    
    
	<!-- PROJECT DEPENDENCIES -->
	<dependencies>
		<!-- wx-apps-service  包含core -->
		<dependency>
		  <groupId>cn.ucaner</groupId>
		  <artifactId>wx-app-service</artifactId>
		  <version>1.0.1-TINA</version>
		</dependency>
		
		<!-- jwt https://github.com/jwtk/jjwt  -->
		<dependency>
		   <groupId>com.auth0</groupId>
		   <artifactId>java-jwt</artifactId>
		   <version>3.3.0</version> 
		</dependency>		
		
		<!-- shiro 权限控制 -->
		<dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-spring</artifactId>
		    <version>1.7.0</version>
		    <exclusions>
		        <exclusion>
		            <artifactId>slf4j-api</artifactId>
		            <groupId>org.slf4j</groupId>
		        </exclusion>
		    </exclusions>
		</dependency>
		<!-- shiro ehcache (shiro缓存)-->
		<dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-ehcache</artifactId>
		    <version>1.4.0</version>
		    <exclusions>
		        <exclusion>
		            <artifactId>slf4j-api</artifactId>
		            <groupId>org.slf4j</groupId>
		        </exclusion>
		    </exclusions>
		</dependency>
			
		<!-- javax.mail  邮件推送 -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		
		<!-- looging 日志 -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		  
		<!--   小程序支付    
		<dependency>
		    <groupId>com.github.binarywang</groupId>
		    <artifactId>weixin-java-pay</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>com.github.binarywang</groupId>
		    <artifactId>weixin-java-miniapp</artifactId>
		</dependency> -->
		
		<!-- 导入后配置可以实现提示功能 -->
			<dependency>
			    <groupId>org.springframework.boot</groupId>
			    <artifactId>spring-boot-configuration-processor</artifactId>
			    <optional>true</optional>
			</dependency>
			
		</dependencies>
		
    
	    <!-- BUILD PROJECT -->
	    <build>
			<!-- PACKAGE SOURCE LOCATION -->
	        <resources>
	            <resource>
	            	<directory>src/main/resources</directory>
	            </resource>
	            <resource>
	                <directory>src/main/java</directory>
		                <includes>
		                    <include>**/*.properties</include>
		                    <include>**/*.xml</include>
		                </includes>
	                <filtering>false</filtering>
	            </resource>
	        </resources>
	        
	        <!-- SpringBoot 打包插件  web[war]应用打包为exec.jar 加入application主线程的jar包 -->
	        <!-- Linux 启动 nohup java -jar xxx.exec.jar &  -->
	        <!-- 后期计划结合Jenkins SonarQube 实现持续化集成环境 + 代码质量检测 by WanGuo -->
	        <plugins>
	        
	            <plugin>
	                <groupId>org.springframework.boot</groupId>
	                <artifactId>spring-boot-maven-plugin</artifactId>
	                <configuration>
	                    <executable>true</executable>
	                </configuration>
	                <executions>
	                    <execution>
	                        <goals>
	                            <goal>repackage</goal>
	                        </goals>
	                        <configuration>
	                            <classifier>exec</classifier>
	                        </configuration>
	                    </execution>
	                </executions>
	            </plugin>
				
				<!-- docker-maven-plugin  -->
	            <plugin>
	                <groupId>com.spotify</groupId>
	                <artifactId>docker-maven-plugin</artifactId>
	                <version>0.4.13</version>
	                <configuration>
	                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
	                    <dockerDirectory>src/main/docker</dockerDirectory>
	                    <resources>
	                        <resource>
	                            <targetPath>/</targetPath>
	                            <directory>${project.build.directory}</directory>
	                            <include>${project.build.finalName}.jar</include>
	                        </resource>
	                    </resources>
	                </configuration>
	            </plugin>
	        </plugins>
	    </build>
</project>